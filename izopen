#!/bin/bash
NAME="izopen"
DESCRIPTION="multi protocol bash script to auto opening given URI and auto creating ssh reverse tunnel socks proxy"
VERSION="3.0.0"
VERSION_DATE="20220715"

## izOpen is very useful when used with KeePassX or any Desktop/Browser Password Manager as secure URI launcher
## written by Ugo Viti <ugo.viti@initzero.it>

## Features:
## supported URI schemas: ssh, rdp, vnc, sftp, ftp, http, https, smb, cifs

### Installation:
## simply copy this script into a user or system wide bin directory (suggestion: cp izopen ~/bin), must be into a PATH variable, and install the following system commands:
## dnf install -y yad kdelibs3 xfreerdp proxychains-ng keepassxc

## Custom config:
## you can customize internal variables modifying the '$HOME/.config/izopen/izopen.conf' file (automatically created on first run)

### NOTE:
## KeePassX 0.x integration:
##        into advanded settings of keepassx select "Custom Browser Command" and insert:
##        izopen %1
##        for every account stored into your database, write into URI field: schema://{USERNAME}:{PASSWORD}@address:port
##        example: rdp://{USERNAME}:{PASSWORD}@www.example.com:3389

## KeePassX 2.x integration (Fedora >= 23):
##        dnf install -y yad kdelibs3 proxychains-ng keepassx

# declare the following variables as global array
declare -A helper_name helper_cmd helper_opts helper_conf

## mandatory system commands based on operating system
#########################################################################
function env_os_linux() {
  izopen_os_env="linux"
  system_commands="yad nc xdg-open ssh sshpass telnet xsel proxychains"

  ## helper commands
  #########################################################################
  
  # default command for SSH
  : ${helper_cmd[ssh]:="ssh"}
 
  # default command for SFTP
  : ${helper_cmd[sftp]:="ssh"}

  # default command for TELNET
  : ${helper_cmd[telnet]:="telnet"}

  # default command for HTTP/S
  #: ${helper_cmd[http]:="midori"}
  : ${helper_cmd[http]:="google-chrome"}

  # default command for RDP
  #: ${helper_cmd[rdp]:="rdesktop"}
  #: ${helper_cmd[rdp]:="xfreerdp"}
  : ${helper_cmd[rdp]:="remmina"}

  # remmina specific, separe with a space every options
  : ${helper_conf[rdp]:="drive=/tmp"}

  # # default command for VNC
  : ${helper_cmd[vnc]:="vncviewer"}

  # # default command for FTP
  : ${helper_cmd[ftp]:="xdg-open"}

  # # default command for SMB/CIFS
  : ${helper_cmd[smb]:="xdg-open"}
  : ${helper_cmd[cifs]:="xdg-open"}

  # default terminal app
  # define the command to use based on current desktop environment
  if   [ "$XDG_CURRENT_DESKTOP" = "MATE" ]; then
      : ${helper_name[terminal]:="$(gsettings get org.mate.applications-terminal exec | tr -d \')"}
  elif [ "$XDG_CURRENT_DESKTOP" = "GNOME" ]; then
      : ${helper_name[terminal]:="$(gsettings get org.gnome.desktop.default-applications.terminal exec | tr -d \')"}
  elif [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; then
      #helper_cmd[terminal]:="$(kreadconfig --file kdeglobals --group General --key TerminalApplication | tr -d \')"}
      : ${helper_name[terminal]:="konsole"}
  elif [ "$XDG_CURRENT_DESKTOP" = "XFCE" ]; then
      : ${helper_name[terminal]:="exo-open --launch TerminalEmulator"}
  elif [ "$XDG_CURRENT_DESKTOP" = "Pantheon" ]; then
      : ${helper_name[terminal]:="exo-open --launch TerminalEmulator"}
    else
      #: ${helper_name[terminal]:="xterm"}
      : ${helper_name[terminal]:="konsole"}
  fi
  : ${helper_cmd[terminal]:="${helper_name[terminal]}"}
}

function env_os_windows() {
  izopen_os_env="windows"
  system_commands="nc ssh sshpass telnet yad"
  
  ## helper commands
  #########################################################################
  # default command for SSH
  : ${helper_cmd[ssh]:="ssh"}

  # default command for SFTP
  : ${helper_cmd[sftp]:="ssh"}

  # default command for HTTP/S
  : ${helper_name[http]:="google-chrome"}
  : ${helper_cmd[http]:="/c/Program\ Files/Google/Chrome/Application/chrome.exe"}

  # default command for RDP
  : ${helper_cmd[rdp]:="xfreerdp"}

  # # default command for VNC
  : ${helper_cmd[vnc]:="vncviewer"}

  # # default command for FTP
  : ${helper_cmd[ftp]:="xdg-open"}

  # # default command for SMB/CIFS
  : ${helper_cmd[smb]:="xdg-open"}
  : ${helper_cmd[cifs]:="xdg-open"}
  
  # default terminal app
  : ${helper_cmd[terminal]:="mintty"}
}

# detect operating system and import the right system variables
case "$OSTYPE" in
  linux*)   env_os_linux ;; # running in linux env
  solaris*) env_os_linux ;; # WIP
  darwin*)  env_os_linux ;; # WIP
  bsd*)     env_os_linux ;; # WIP
  msys*)    env_os_windows ;; # running in windows env
  cygwin*)  env_os_windows ;; # running in windows env
  *)        env_os_linux ;; # always failback to linux env
esac

## variables
#########################################################################
_PROG=$( echo ${0##*/} )     # define the command name

: ${debug:=0}                # enable script debug
: ${terminal_use:=1}         # open compatible schema using external terminal gui
: ${tunnel_create:=1}        # try to create a new ssh tunnel when connecting via ssh
: ${tunnel_use:=1}           # use the existing ssh tunnel
: ${tunnel_use_force:=0}     # always use the tunnel for every opened uri
: ${tunnel_use_force_ssh:=0} # request the usage of estabilished ssh tunnel when connecting via ssh. this make possible to create a tunnel in a tunnel
: ${tunnel_port_min:=2000}   # minimun tunnel port number to use
: ${tunnel_port_max:=4999}   # maximun tunnel port number to use

# default izopen config file
izopen_conf_dir="$HOME/.config/izopen"
izopen_cache_dir="$HOME/.cache/izopen"
izopen_conf_file="$izopen_conf_dir/izopen.conf"
izopen_conf_socks_port_current="$izopen_conf_dir/socks_port_current.conf"

izopen_conf_hosts_dir="$izopen_conf_dir/hosts"
izopen_conf_proxychains_dir="$izopen_conf_dir/proxychains"

# make dirs if not exist
[ ! -e "$izopen_conf_dir" ] && mkdir -p "$izopen_conf_dir"
[ ! -e "$izopen_conf_hosts_dir" ] && mkdir -p "$izopen_conf_hosts_dir"
[ ! -e "$izopen_conf_proxychains_dir" ] && mkdir -p "$izopen_conf_proxychains_dir"

# izopen log file
izopen_log_file="$izopen_conf_dir/izopen.log"

# import configuration from izopen.conf if exist and override default script variables
[ -f "${izopen_conf_file}" ] && source "${izopen_conf_file}"

# commands helper functions
#########################################################################
function make_default_config() {
  cat <<EOF
# terminal options
#helper_cmd[terminal]="konsole"
#helper_opts[terminal]="--noclose"

# ssh options
#helper_cmd[ssh]="ssh"
#helper_opts[ssh]="-z"

# rdp options (remmina)
#helper_cmd[rdp]="remmina"
#helper_conf[rdp]="drive=/tmp"

# rdp options (freerdp)
#helper_cmd[rdp]="xfreerdp"
#helper_opts[rdp]="/drive:/tmp"

# browser options
#helper_cmd[http]="google-chrome"
#helper_opts[http]="--proxy-bypass-list='<-loopback>'"

## for windows browser support define helper_name[http] too
#helper_name[http]="google-chrome"
#helper_cmd[http]:="/c/Program\ Files/Google/Chrome/Application/chrome.exe"}

# others uri
#helper_cmd[vnc]="vncviewer"
#helper_cmd[ftp]="xdg-open"
#helper_cmd[telnet]="telnet"
#helper_cmd[smb]="xdg-open"
#helper_cmd[cifs]="xdg-open"

## misc options
#debug=1
#nc_opts="-z" 
#tunnel_use_force_ssh=0
EOF
}

function check_system_commands() {
  # verify if all commands are installed in the system paths
  for COMMAND in $@
    do
      which "$COMMAND" >/dev/null 2>&1
      [ $? -ne 0 ] && echo "WARNING: the command '$COMMAND' doesn't exist in any path, please install it and retry"
    done
}

function check_helper_cmd() {
  which "$@" >/dev/null 2>&1
  [ $? -ne 0 ] && echo "WARNING: the command '$@' doesn't exist in any path, please install it and retry"
}

function helper_terminal() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[terminal]}" ] && helper_name[terminal]="${helper_cmd[terminal]}"

  # verify if the command exist
  check_helper_cmd "${helper_cmd[terminal]}"

  if [ "$tunnel_create" = 1 ]; then
     local terminal_title="H:$host P:$tunnel_port_create [MASTER]"
   else
     local terminal_title="H:$host P:$tunnel_port_create [SLAVE]"
  fi

  case ${helper_name[terminal]} in
    konsole)
      #helper_opts[terminal]="-p tabtitle='(%u) %H'"
      helper_opts[terminal]+=" -p tabtitle='$terminal_title'"
      helper_opts[terminal]+=" -p RemoteTabTitleFormat='$terminal_title'"
      #helper_opts[terminal]+=" --noclose"
      ;;
    mintty)
      helper_opts[terminal]+=" -T \"$terminal_title\""
      ;;
    *)
      #echo helper_name[terminal]: ${helper_name[terminal]}
      helper_opts[terminal]+=" --title=\"$terminal_title\""
      ;;
  esac
}

function helper_ssh() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[ssh]}" ] && helper_name[ssh]="${helper_cmd[ssh]}"
  
  # verify if the command exist
  check_helper_cmd "${helper_cmd[ssh]}"
  
  # open external terminal app if required
  [ "$terminal_use" = 1 ] && helper_terminal && helper_cmd="${helper_cmd[terminal]}${helper_opts[terminal]} -e "

  # read username and password from stdin if empty
  #[ -z "$username" ] && read -p "username: " username;
  #[ -z "$password" ] && read -p "password: " password;
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[ssh]}"  
  # add username, otherwise use the current logged in user
  [ ! -z "$username" ] && helper_opts+=" $username@$host" || helper_opts+=" $host"
  # add the port if not default 22
  [ ! -z "$port" ] && helper_opts+=" -p $port"
  # enable compression
  helper_opts+=" -C"
  # if tunnel_create=1 add ssh options to create socks tunnel and compression
  [ "$tunnel_create" = 1 ] && helper_opts+=" -D $tunnel_port_create"
  
  # FIXME don't use sshpass outside linux environment because this bug:
  # https://github.com/msys2/MSYS2-packages/issues/2458
  if [ "$izopen_os_env" = "linux" ]; then
    # password less login using sshpass
    if [ ! -z "$password" ]; then
      # pretty insecure, but the export is needed to avoid printing password into processlist
      export SSHPASS=$password
      helper_prepend+="sshpass -e "
      # debug
      #echo SSHPASS: $SSHPASS
    fi
  fi
  
  # launch the uri
  helper_cmd+="${helper_prepend}${helper_cmd[ssh]}${helper_opts}"

  #######
  ## TEST
  #######
  ## colorized prompt:
  #helper_cmd="gnome-terminal -e \"ssh $([ -n "$port" ] && echo "-p $port") $username@$host ${helper_opts}\""
  #helper_opts[ssh]="--title=\"export PS1='\e[0;31m[\u@\h \W]\$ \e[m '; exec bash\""
}

function helper_telnet() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[telnet]}" ] && helper_name[telnet]="${helper_cmd[telnet]}"

  # verify if the command exist
  check_helper_cmd "${helper_cmd[telnet]}"
  
  # open external terminal app if required
  [ "$terminal_use" = 1 ] && helper_terminal && helper_cmd="${helper_cmd[terminal]}${helper_opts[terminal]} -e "
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[telnet]}"
  helper_opts+=" $host"
  [ -n "$port" ] && helper_opts+=" $port"
  
  # launch the uri
  helper_cmd="${helper_prepend}${helper_cmd[telnet]}${helper_opts}"
}

function helper_http() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[http]}" ] && helper_name[http]="${helper_cmd[http]}"
  
  # verify if the command exist
  check_helper_cmd "${helper_cmd[http]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[http]}"
  
  # run the connection
  case ${helper_name[http]} in
    google-chrome)
      # open the browser with this options only on tunnel connection
      if [ $tunnel_use = 1 ]; then
        helper_opts+=" --aggressive-cache-discard"
        helper_opts+=" --disable-notifications"
        helper_opts+=" --enable-aggressive-domstorage-flushing"
        helper_opts+=" --disable-client-side-phishing-detection"
        helper_opts+=" --disable-gpu"
        helper_opts+=" --restore-last-session"
        helper_opts+=" --no-first-run"
        helper_opts+=" --disable-translate"
        helper_opts+=" --password-store=basic"
        helper_opts+=" --proxy-server=\"socks5://localhost:$tunnel_port_use\""
        helper_opts+=" --user-data-dir=\"$izopen_conf_dir/google-chrome/$tunnel_port_use\""
      fi
      # because this helper doesn't works via proxychains wrapper, don't use the ${helper_prepend} command
      unset helper_prepend
      ;;
    midori)
      helper_opts+=" -c \"$izopen_conf_dir/midori/$tunnel_port_use\""
      ;;
    *)
      helper_cmd[http]="xdg-open"
      ;;
  esac
  
  # launch the uri
  helper_cmd="${helper_prepend}${helper_cmd[http]}${helper_opts} ${uri}"
}

function helper_rdp() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[rdp]}" ] && helper_name[rdp]="${helper_cmd[rdp]}"
  
  # verify if the command exist
  check_helper_cmd "${helper_cmd[rdp]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[rdp]}"

  # obtain general info used by all rdp commands
  ## extract windows domain from username and convert to the right name
  # using / or \ as domain separator the domain is the first argument
  if [ ! -z $(echo "$username" | grep "/") ]; then
    domain="$(echo "$username" | awk -F"/" '{print $1}')"
    username="$(echo "$username" | awk -F"/" '{print $2}')"
  fi
  # using @ as domain separator the domain is the second argument
  if [ ! -z $(echo "$username" | grep "@") ]; then
    domain="$(echo "$username" | awk -F"@" '{print $2}')"
    username="$(echo "$username" | awk -F"@" '{print $1}')"
  fi

  # FIXME: @20220714 still needed? commenting
  #password="$(echo -e -n "$password" | sed 's/\%25/\%/g' | sed -e 's/%\([A-Z]\)/%\L\1/')" # keepassxc bug workaround: after the '%' char, keepassxc convert to uppercase the following char

  # special characters in password like ',!
  #password="$(echo -e -n "$password" | sed -e "s/'/\\\'/g" -e "s/!/\\\!/g")"

  #[ -z "$username" ] && username=$domain && unset domain
  #username="$(echo "$username" | sed 's/\//\\\\/g')"

  if [[ -z "$host" || -z "$username" || -z "$password" || "$username" = "{USERNAME}" || "$password" = "{PASSWORD}" || "$username" = "%7BUSERNAME%7D" || "$password" = "%7BPASSWORD%7D" ]]; then
    frmdata=$(LANG=C yad --center --width=300 --title="Connect to remote computer" --focus-field=4 --align=right --form --field="Domain" "$domain" --field="Address" "$host" --field="Username" "$username" --field="Password":H "$password" --field="Security":CB 'rdp!tls!^nla!ext' --field="Admin Console":CHK | grep -v "WINDOW DECORATIONS RELOADED")
    [ $? != 0 ] && exit 1
    domain=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $1 }')
    host=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $2 }')
    username=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $3 }')
    password=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $4 }')
    # escape all special characters in password
    password=$(echo $password | sed 's/[^a-zA-Z0-9]/\\&/g')
    security=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $5 }')
    console=$(echo $frmdata | awk 'BEGIN {FS="|" } { print $6 }')
  fi

  # run the connection
  case ${helper_name[rdp]} in
    rdesktop)
      helper_opts+=" -k it -g 1280x780"
      [ -n "$domain" ]   && helper_opts+=" -d '$domain'"
      [ -n "$username" ] && helper_opts+=" -u '$username'"
      [ -n "$password" ] && helper_opts+=" -p '$password'"
      [ -n "$port" ]     && port=":$port"

      # launch the uri
      helper_cmd="${helper_prepend}${helper_cmd[rdp]}${helper_opts} ${host}${port}"
      ;;
    xfreerdp)
      # FIXME: this function always use the default keyboard
      helper_opts+=" +clipboard /size:85% /cert-tofu /cert-ignore /log-level:ERROR"

      #kbd_layout="$(setxkbmap -print | grep xkb_symbols | awk '{print $4}' | awk -F"+" '{print $2}' | awk -F":" '{print $1}')"
      #case "$kbd_layout" in
      #  'it(us)'|'us') kbd_layout="United States - English" ;;
      #esac
      #[ ! -z "$kbd_layout" ] && helper_opts+=" /kbd:\"$kbd_layout\""
      #helper_opts+=" /audio-mode:0 /microphone:sys:pulse /sound:sys:pulse"
      [ ! -z "$domain" ]   && helper_opts+=" /d:'$domain'"
      [ ! -z "$username" ] && helper_opts+=" /u:'$username'"
      [ ! -z "$password" ] && helper_opts+=" /p:$password" || helper_opts+=" /p:''"
      [ ! -z "$port" ]     && helper_opts+=" /port:$port"
      [ ! -z "$security" ] && helper_opts+=" /sec:$security"
      [ "$console" = "TRUE" ] && helper_opts+=" /console"
      
      # proxy tunnel manage
      [ $tunnel_use = 1 ] && helper_opts+=" /proxy:socks5://localhost:$tunnel_port_use"
      
      # because this helper doesn't works via proxychains wrapper, don't use the ${helper_prepend} command
      unset helper_prepend
      
      # launch the uri
      helper_cmd="${helper_prepend}${helper_cmd[rdp]}${helper_opts} /v:${host}"
      ;;
    remmina)
      izopen_conf_remmina_dir="$izopen_conf_dir/remmina"
      [ ! -e "$izopen_conf_remmina_dir" ] && mkdir -p "$izopen_conf_remmina_dir"
      connection_name="$(echo $host | sed -e 's/[^A-Za-z0-9_-]/_/g')"
      izopen_conf_remmina_host="$izopen_conf_remmina_dir/${connection_name}.remmina"

      function make_remmina_conf() {
        cat <<EOF
[remmina]
name=$connection_name
$([ $tunnel_use = 1 ] && echo -e "proxy_type=socks5\nproxy_hostname=localhost\nproxy_port=$tunnel_port_use")
protocol=RDP
resolution_mode=2
viewmode=1
scale=2
ignore-tls-errors=1
window_maximize=1
server=$host
$([ ! -z "$domain" ] && echo "domain=$domain")
$([ ! -z "$username" ] && echo "username=$username")
$([ ! -z "$password" ] && echo "password=$password")
$(for remmina_conf in ${helper_conf[rdp]}; do echo -e "$remmina_conf\n";done)
EOF
      }
      
      make_remmina_conf > "${izopen_conf_remmina_host}"
      
      # because this helper doesn't works via proxychains wrapper, don't use the ${helper_prepend} command
      unset helper_prepend
      
      # launch the uri
      helper_cmd="${helper_prepend}${helper_cmd[rdp]}${helper_opts} -c ${izopen_conf_remmina_host}"
      ;;
  esac
}

function helper_vnc() {
  # if helper_name[$schema] is not defined, use the helper_cmd[$schema] instead
  [ -z "${helper_name[vnc]}" ] && helper_name[vnc]="${helper_cmd[vnc]}"
  
  # verify if the command exist
  check_helper_cmd "${helper_cmd[vnc]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[vnc]}"
  # vnc doesn't support username and actually don't accept the password. use the gnome keyring instead for this
  #helper_cmd="vinagre $schema://$host$([ -n $port ] && echo ":$port")"
  [ -n $port ] && helper_opts+=":$port"
  
  # launch the uri
  helper_cmd="${helper_cmd[vnc]} ${host}${helper_opts}"
}

function helper_sftp() {
  check_helper_cmd "${helper_cmd[sftp]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[sftp]}"
  
  # launch the uri
  helper_cmd="helper_ssh \"$uri\""
}

function helper_ftp() {
  check_helper_cmd "${helper_cmd[ftp]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[ftp]}"
  
  # launch the uri
  helper_cmd="${helper_prepend}${helper_cmd[ftp]}${helper_opts} \"${uri}\""
}

function helper_https() {
  helper_http "$uri"
}

function helper_about() {
  helper_http "$uri"
}

function helper_smb() {
  check_helper_cmd "${helper_cmd[smb]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[smb]}"
  
  helper_cmd="${helper_prepend}${helper_cmd[smb]}${helper_opts} \"${uri}\""
}

function helper_cifs() {
  check_helper_cmd "${helper_cmd[cifs]}"
  
  # manage non mandatory cmd options
  helper_opts=" ${helper_opts[cifs]}"
  
  helper_cmd="${helper_prepend}${helper_cmd[cifs]}${helper_opts} \"${uri}\""
}

# SYSTEM FUNCTIONS
# DON'T TOUCH ANYTHING BELLOW
#########################################################################

# create tunnel
function helper_tunnel_create() {
 # put specific address port forwarding port config file
 izopen_conf_socks_host="$izopen_conf_hosts_dir/$(echo $host | sed -e 's/[^A-Za-z0-9_-]/_/g').conf"

 # FIXME legacy config file path management
 izopen_conf_socks_host_legacy="$izopen_conf_dir/$(echo $host | sed -e 's/[^A-Za-z0-9_-]/_/g').conf"
 [ -e "$izopen_conf_socks_host_legacy" ] && mv "$izopen_conf_socks_host_legacy" "$izopen_conf_socks_host"
  
 # don't create a new tunnel if it's already opened
 if [ -f "$izopen_conf_socks_host" ]
  then
    nc $nc_opts 127.0.0.1 $(cat "$izopen_conf_socks_host") </dev/null 2>/dev/null
    [ $? != 0 ] && tunnel_create=1 || tunnel_create=0
 fi

    # import port configuration of remote address if exist
    if [ -e "$izopen_conf_socks_host" ] ; then 
      tunnel_port_create="$(cat "$izopen_conf_socks_host")"
    fi
 
# manage the proxychains tunnel configuration
 if [ "$tunnel_create" = 1 ]
  then
    if [ ! -e "$izopen_conf_socks_host" ] ; then
      # find first free usable port
      local tunnel_port
      tunnel_port=$tunnel_port_min

      until [ ! -z "$tunnel_port_create" ]; do
        izopen_conf_socks_proxy="$izopen_conf_proxychains_dir/$tunnel_port.conf"
        if [ ! -e "$izopen_conf_socks_proxy" ];then
            tunnel_port_create=$tunnel_port
          else
            let tunnel_port++
        fi
      done
      # save the current used port for the specified host
      echo $tunnel_port_create > "$izopen_conf_socks_host"
    fi

    # make proxychains config if not exist
    izopen_conf_socks_proxy="$izopen_conf_proxychains_dir/$tunnel_port_create.conf"
    if [ ! -e "$izopen_conf_socks_proxy" ]; then
    echo -e "strict_chain
#quiet_mode
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000

[ProxyList]
socks5 127.0.0.1 $tunnel_port_create" > "$izopen_conf_socks_proxy"
    fi

    # save the last used/reused port
    echo $tunnel_port_create > "$izopen_conf_socks_port_current"
 fi
}

# use al already opened tunnel
function helper_tunnel_use() {
  #tunnel_port_use=$(LANG=C yad --title="izOpen SSH Proxy" --entry --entry-text=$tunnel_port_use --text="Inserire la porta del Proxy Socks \nCompresa fra $tunnel_port_min e $tunnel_port_max\n" 2>/dev/null)

  if [[ -e "$izopen_conf_socks_port_current" && -z "$tunnel_port_use" ]]; then
    # read the latest tunnel port used if not specified
    tunnel_port_use="$(cat "$izopen_conf_socks_port_current")"
    
    # request if we must use the last used port
    tunnel_port_use=$(LANG=C yad --center --title="izOpen SSH Proxy" --entry --numeric --entry-text=$tunnel_port_use --text="<b>Inserire la porta del Proxy Socks</b> \nCompresa fra $tunnel_port_min e $tunnel_port_max\n" $tunnel_port_min $tunnel_port_max --timeout=10 --timeout-indicator=bottom | tr -d [:alpha:] | tr -d [:cntrl:] | tr -d [:space:])
  fi 
  
  # save the last used port for later usage
  [ ! -z "$tunnel_port_use" ] && echo $tunnel_port_use > "$izopen_conf_socks_port_current"
}

function helper_tunnel_manage() {
  # verify if needed to create the ssh tunnel only if the uri is ssh://
  case ${schema} in
    ssh)
        # by default don't use tunnel if the schema is ssh and is not forced
        [ "$tunnel_use_force_ssh" = 0 ] && tunnel_use=0
        helper_tunnel_create
        ;;
  esac

  # ask for a port if we want use a tunnel
  if [ $tunnel_use = 1 ] ; then
      helper_tunnel_use
    else
      tunnel_port_use=""
  fi

  # create the proxychains4 config
  if [[ $tunnel_use = 1 && ! -z $tunnel_port_use && $tunnel_port_use =~ ^-?[0-9]+$ && $tunnel_port_use -ge $tunnel_port_min && $tunnel_port_use -le $tunnel_port_max ]]
  then
    # proxychains configuration
    helper_prepend="proxychains4 -f $izopen_conf_proxychains_dir/$tunnel_port_use.conf "
  #  else
  #    [ ! -z $tunnel_port_use ] && LANG=C yad --center --error --text="La porta specificata non è valida: $tunnel_port_use\n\nInserire una porta compresa fra $tunnel_port_min e $tunnel_port_max" 2>/dev/null && unset tunnel_port_use
  fi

  # don't use tunnel socks proxy if the port is not specified or wrong
  [ -z $tunnel_port_use ] && tunnel_use=0
}

function print_log_header() {
  # print the parsed fields
  echo "----------------------------------------------------------------------------------------"
  echo "$(date +"%Y-%m-%d %H:%M:%S %Z") user:[$USER] uid:[$UID] uri:[$uri_safe]"
  [ $debug = 1 ] && print_log_debug
  echo "-- output ------------------------------------------------------------------------------"
}

function print_log_output() {
  tail -n 350 "${izopen_log_file}" | sed -n "H; /^$(date '+%Y-%m-%d')/h; \${g;p;}" | LANG=C yad --center --width=1000 --height=500 --title="Connection Error" --button="Close":0 --text "Errors from ${izopen_log_file}" --text-info --fontname="Monospace 8"
}

function print_log_footer() {
  echo "----------------------------------------------------------------------------------------"
}

function print_log_debug() {
  # print the parsed fields
  echo "-- debug -------------------------------------------------------------------------------"
  cat <<EOF  
                uri: ${uri}
             schema: ${schema}
           username: ${username}
           password: ${password}
               host: ${host}
               port: ${port}
               path: ${path}
      tunnel_create: ${tunnel_create} - port: ${tunnel_port_create}
         tunnel_use: ${tunnel_use} - port: ${tunnel_port_use}
        helper_name: ${helper_name[$schema]}
         helper_cmd: ${helper_cmd[$schema]}
        helper_opts: ${helper_opts[$schema]}
     helper_prepend: ${helper_prepend}
                cmd: ${helper_cmd}
EOF
  echo "----------------------------------------------------------------------------------------"
}

#
# URI parsing function
#
# The function creates global variables with the parsed results.
# It returns 0 if parsing was successful or non-zero otherwise.
#
# [schema://][user[:password]@]host[:port][/path][?[arg1=val1]...][#fragment]
#
# thanks to: https://wp.vpalos.com/537/uri-parsing-using-bash-built-in-features/
function uri_parser() {
    # uri capture
    uri="$@"

    # safe escaping
    uri="${uri//\`/%60}"
    uri="${uri//\"/%22}"

    # top level parsing
    pattern='^(([a-z]{3,6}):\/\/)?((([^:]+)(:([^@\/]*))?@)?([^:\/?]+)(:([0-9]+))?)(\/[^?]*)?(\?[^#]*)?(#.*)?$'
    [[ "$uri" =~ $pattern ]] || return 1;

    # component extraction
    uri=${BASH_REMATCH[0]}
    uri_schema=${BASH_REMATCH[2]}
    uri_address=${BASH_REMATCH[3]}
    uri_username=${BASH_REMATCH[5]}
    uri_password=${BASH_REMATCH[7]}
    uri_host=${BASH_REMATCH[8]}
    uri_port=${BASH_REMATCH[10]}
    uri_path=${BASH_REMATCH[11]}
    uri_query=${BASH_REMATCH[12]}
    uri_fragment=${BASH_REMATCH[13]}

    # path parsing
    count=0
    path="$uri_path"
    pattern='^/+([^/]+)'
    while [[ $path =~ $pattern ]]; do
        eval "uri_parts[$count]=\"${BASH_REMATCH[1]}\""
        path="${path:${#BASH_REMATCH[0]}}"
        let count++
    done

    # query parsing
    count=0
    query="$uri_query"
    pattern='^[?&]+([^= ]+)(=([^&]*))?'
    while [[ $query =~ $pattern ]]; do
        eval "uri_args[$count]=\"${BASH_REMATCH[1]}\""
        eval "uri_arg_${BASH_REMATCH[1]}=\"${BASH_REMATCH[3]}\""
        query="${query:${#BASH_REMATCH[0]}}"
        let count++
    done

    # return success
    return 0
}

function uri_unset() {
  unset uri uri_schema uri_address uri_username uri_password uri_host uri_port uri_path uri_query uri_fragment count query pattern
}

function confirm () {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " -n 1 response
    case $response in
        [yY][eE][sS]|[yY])
            echo
            true
            ;;
        *)
            echo
            false
            ;;
    esac
}


function uri_open() {
  local uri="$1"
  shift
  local args="$@"

  # parse the uri
  uri_parser "$uri"
  local schema="$uri_schema"
  local username="$uri_username"
  local password="$uri_password"
  # try to obtain password from clipboard
  if [[ -z "$password" ]]; then
    if [ "$izopen_os_env" = "windows" ]; then
        # windows cygwin/msys2 env use the /dev/clipboard for sharing
        local clipboard=$(cat /dev/clipboard)
        echo -n " " > /dev/clipboard
      else
        local clipboard=$(xsel -b)
        # remove the password from the clipboard
        # FIXME using a workaround because xsel doesn't clean the clipboard contents I use a SPACE here. of course you can't use single space passwords here :)
        echo -n " " | xsel -i -b
    fi

    # debug
    #echo clipboard: $clipboard
    #echo xsel: $(xsel -b)
    
    [[ ! -z "$clipboard" || "$clipboard" != " " ]] && local password="$(echo $clipboard | tr -d [:cntrl:])" || unset password
  fi
  local host="$uri_host"
  local port="$uri_port"
  local path="$uri_path"
  # for safety logging create a new uri variable without the password
  [ -z "$password" ] && local uri_safe="$uri" || local uri_safe="$(echo "$uri" | sed "s/:$(echo "$password" | sed 's/[^a-zA-Z0-9]/\\&/g')//g")"

  uri_unset
    
  # force the usage of ssh tunnel for every openened url
  [ $tunnel_use_force = 1 ] && tunnel_use=1
  
  # WORKAROUND: Use an already estabilished ssh tunnel and open default http handler defining schema as http
  [[ $tunnel_use -eq 1 && -z "$uri" ]] && schema=http
  
  ## customize the following uri for command associations:
  case $schema in
    ssh|telnet|rdp|vnc|sftp|ftp|http|https|about|smb|cifs|file)
      # create or use ssh tunnel if required
      case $schema in
        ssh)
          # here only to mantain tunnel_create=1 if defined
          ;;
        *)
          # only ssh schema can be used to create a tunnel
          tunnel_create=0
          ;;
      esac
      # manage the use or creation of ssh tunnel
      [[ "$tunnel_create" = 1 || "$tunnel_use" = 1 ]] && helper_tunnel_manage "$uri"
      
      TRY=1; TRYMAX=2
      until [ $TRY -ge $TRYMAX ]; do
        # obtain commands to use to connect
        helper_${schema} "$uri"
              
        # log the command execution
        print_log_header

        # make the connection to the remote server
        eval "${helper_cmd}"
        RETVAL=$?
        
        # debug
        #echo TRY:[$TRY/$TRYMAX] RETVAL:[$RETVAL]
        
        # for safety reasons unset the password after first try
        unset password
        
        # exit or retry
        [ $RETVAL = 0 ] && TRY=$TRYMAX || let TRY+=1
      done
      
      # log the command output
      [ $RETVAL != 0 ] && print_log_output
      #print_log_footer
      ;;
    *)
      echo "ERROR: invalid URI specified: $uri"
      return 1;
      ;;
  esac
}

###################################################################
#################### default program menu and arguments validations
###################################################################

# usage help menu
function _usage()  {
  _PROG=$( echo ${0##*/} )
  cat <<EOF
$NAME - $DESCRIPTION
written by Ugo Viti <ugo.viti@initzero.it>
version: $VERSION - release: $VERSION_DATE

Usage: $_PROG [options] URI

Options:
  -h, --help             Show help options
  -d, --debug            Enable debug (default: $debug)
  -u, --uri              Specify the URI to open (you can also specify the URL as last argument without this option)
  -t, --terminal         Open compatible schema using external terminal gui (default: $terminal_use)
  -f, --force-tunnel     Force the usage request of an already estabilished ssh tunnel when opening the uri (default: $tunnel_use)
  -p, --port             Use the specified socks port to connect using reverse tunnel (default: request the port to use)
  --mkconfig             Create default config file, overwriting it if already exist (default location: $izopen_conf_file)

Examples:
  # general usage:
  $ $_PROG uri://username:password@address:port
  
  # open a http web page:
  $ $_PROG http://www.example.com
  
  # open a http web page specifing username and password:
  $ $_PROG http://john:doe@www.example.com
  
  # open a ssh connection specifing username and port:
  $ $_PROG ssh://root@secure.example.com:222
  
  # open a rdp connection specifing username and password:
  $ $_PROG rdp:///Administrator:password@server
  
  # open a rdp connection specifing domain/username and password and port:
  $ $_PROG rdp://DOMAIN/Administrator:password@server:33189
  
  # open a rdp connection specifing username@domain and password and port:
  $ $_PROG rdp://Administrator@example.com:password@server:33189
  
  # open a smb file share with default file manager:
  $ $_PROG smb://Administrator:password@server
  
  # open a http browser using an already connected ssh tunnel (ask for the port):
  $ $_PROG -t
  
  # open a http browser using an already connected ssh tunnel specifing the port (-t option is implicit for -p):
  $ $_PROG -p 2069
EOF
}

# if not arguments print usage and exit
[ $# = 0 ] && _usage && exit 1

# define command short and long options
_optionsShort="hu:dtfp:"
_optionsLong="help,uri:,debug,terminal,force-tunnel,port,mkconfig"

# options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o $_optionsShort -l $_optionsLong -- "$@"); then
  # something went wrong, getopt will put out an error message for us
  echo "exiting... incorrect options provided. use -h for help" >&2
  exit 1
fi

eval set -- "$options"

while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      _usage
      exit 1
      ;;
    -u|--uri)
      # for options with required arguments, an additional shift is required
      shift
      uri="$1"
      ;;
    -d|--debug)
      debug="1"
      ;;
    -t|--terminal)
      # force usage of estabilished tunnel for all uri schema
      [ $terminal_use = 1 ] && terminal_use=0 || terminal_use=1
      ;;
    -f|--force-tunnel)
      # force usage of estabilished tunnel for all uri schema
      tunnel_use_force=1
      tunnel_use_force_ssh=1
      ;;
    -p|--port)
      # specify the tunnel port to use (ssh schema excluded). it involves --force-tunnel
      shift
      tunnel_use_force=1
      # use the specified tunnel socks port
      tunnel_port_use=$1
      ;;
    --mkconfig)
      if [ -e "$izopen_conf_file" ]; then
          confirm "WARNING: you are replacing the previous config file: $izopen_conf_file - Are you sure? [y/N]:" && make_default_config > "$izopen_conf_file"
        else
          make_default_config > "$izopen_conf_file"
      fi
      exit $?
      ;;
    (--) shift; break;;
    (-*) echo "ERROR: unrecognized option: '$1'" 1>&2; exit 1;;
    (*) _usage ; echo "invalid switch specified - abort." >&2 ; exit 1 ;;
  esac
  # for testing purposes:
  #echo "$1"
  shift
done

# if the -u|--uri switch is not used, then read the latest argument if exist
[ -z "$uri" ] && uri="$@"
[[ -z "$uri" && $tunnel_use_force -eq 0 ]] && echo "ERROR: no URI specified" && exit 1

# create defualt user config file if not exist
[ ! -e "$izopen_conf_file" ] && make_default_config > "$izopen_conf_file"

# check if all required system command are installed
check_system_commands $system_commands

uri_open "$uri" 2>&1 | tee -a "${izopen_log_file}"

# be sure to unset all dangerous variables
trap "unset password SSHPASS" 0
